/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.umut.yesevi.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-16")
public class EmployeeThrift implements org.apache.thrift.TBase<EmployeeThrift, EmployeeThrift._Fields>, java.io.Serializable, Cloneable, Comparable<EmployeeThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployeeThrift");

  private static final org.apache.thrift.protocol.TField RECID_FIELD_DESC = new org.apache.thrift.protocol.TField("recid", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("share", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField JOBCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobcode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EmployeeThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EmployeeThriftTupleSchemeFactory();

  public double recid; // required
  public double share; // required
  public int jobcode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String title; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECID((short)1, "recid"),
    SHARE((short)2, "share"),
    JOBCODE((short)3, "jobcode"),
    TITLE((short)4, "title");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECID
          return RECID;
        case 2: // SHARE
          return SHARE;
        case 3: // JOBCODE
          return JOBCODE;
        case 4: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECID_ISSET_ID = 0;
  private static final int __SHARE_ISSET_ID = 1;
  private static final int __JOBCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECID, new org.apache.thrift.meta_data.FieldMetaData("recid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHARE, new org.apache.thrift.meta_data.FieldMetaData("share", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JOBCODE, new org.apache.thrift.meta_data.FieldMetaData("jobcode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployeeThrift.class, metaDataMap);
  }

  public EmployeeThrift() {
  }

  public EmployeeThrift(
    double recid,
    double share,
    int jobcode,
    java.lang.String title)
  {
    this();
    this.recid = recid;
    setRecidIsSet(true);
    this.share = share;
    setShareIsSet(true);
    this.jobcode = jobcode;
    setJobcodeIsSet(true);
    this.title = title;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployeeThrift(EmployeeThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.recid = other.recid;
    this.share = other.share;
    this.jobcode = other.jobcode;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
  }

  @Override
  public EmployeeThrift deepCopy() {
    return new EmployeeThrift(this);
  }

  @Override
  public void clear() {
    setRecidIsSet(false);
    this.recid = 0.0;
    setShareIsSet(false);
    this.share = 0.0;
    setJobcodeIsSet(false);
    this.jobcode = 0;
    this.title = null;
  }

  public double getRecid() {
    return this.recid;
  }

  public EmployeeThrift setRecid(double recid) {
    this.recid = recid;
    setRecidIsSet(true);
    return this;
  }

  public void unsetRecid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECID_ISSET_ID);
  }

  /** Returns true if field recid is set (has been assigned a value) and false otherwise */
  public boolean isSetRecid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECID_ISSET_ID);
  }

  public void setRecidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECID_ISSET_ID, value);
  }

  public double getShare() {
    return this.share;
  }

  public EmployeeThrift setShare(double share) {
    this.share = share;
    setShareIsSet(true);
    return this;
  }

  public void unsetShare() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARE_ISSET_ID);
  }

  /** Returns true if field share is set (has been assigned a value) and false otherwise */
  public boolean isSetShare() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARE_ISSET_ID);
  }

  public void setShareIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARE_ISSET_ID, value);
  }

  public int getJobcode() {
    return this.jobcode;
  }

  public EmployeeThrift setJobcode(int jobcode) {
    this.jobcode = jobcode;
    setJobcodeIsSet(true);
    return this;
  }

  public void unsetJobcode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBCODE_ISSET_ID);
  }

  /** Returns true if field jobcode is set (has been assigned a value) and false otherwise */
  public boolean isSetJobcode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBCODE_ISSET_ID);
  }

  public void setJobcodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBCODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public EmployeeThrift setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RECID:
      if (value == null) {
        unsetRecid();
      } else {
        setRecid((java.lang.Double)value);
      }
      break;

    case SHARE:
      if (value == null) {
        unsetShare();
      } else {
        setShare((java.lang.Double)value);
      }
      break;

    case JOBCODE:
      if (value == null) {
        unsetJobcode();
      } else {
        setJobcode((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RECID:
      return getRecid();

    case SHARE:
      return getShare();

    case JOBCODE:
      return getJobcode();

    case TITLE:
      return getTitle();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RECID:
      return isSetRecid();
    case SHARE:
      return isSetShare();
    case JOBCODE:
      return isSetJobcode();
    case TITLE:
      return isSetTitle();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof EmployeeThrift)
      return this.equals((EmployeeThrift)that);
    return false;
  }

  public boolean equals(EmployeeThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_recid = true;
    boolean that_present_recid = true;
    if (this_present_recid || that_present_recid) {
      if (!(this_present_recid && that_present_recid))
        return false;
      if (this.recid != that.recid)
        return false;
    }

    boolean this_present_share = true;
    boolean that_present_share = true;
    if (this_present_share || that_present_share) {
      if (!(this_present_share && that_present_share))
        return false;
      if (this.share != that.share)
        return false;
    }

    boolean this_present_jobcode = true;
    boolean that_present_jobcode = true;
    if (this_present_jobcode || that_present_jobcode) {
      if (!(this_present_jobcode && that_present_jobcode))
        return false;
      if (this.jobcode != that.jobcode)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recid);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(share);

    hashCode = hashCode * 8191 + jobcode;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EmployeeThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRecid(), other.isSetRecid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recid, other.recid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShare(), other.isSetShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share, other.share);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJobcode(), other.isSetJobcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobcode, other.jobcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTitle(), other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EmployeeThrift(");
    boolean first = true;

    sb.append("recid:");
    sb.append(this.recid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("share:");
    sb.append(this.share);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobcode:");
    sb.append(this.jobcode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'recid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'share' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'jobcode' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public EmployeeThriftStandardScheme getScheme() {
      return new EmployeeThriftStandardScheme();
    }
  }

  private static class EmployeeThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<EmployeeThrift> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployeeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recid = iprot.readDouble();
              struct.setRecidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.share = iprot.readDouble();
              struct.setShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOBCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobcode = iprot.readI32();
              struct.setJobcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRecid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'recid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetShare()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'share' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJobcode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobcode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployeeThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RECID_FIELD_DESC);
      oprot.writeDouble(struct.recid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_FIELD_DESC);
      oprot.writeDouble(struct.share);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOBCODE_FIELD_DESC);
      oprot.writeI32(struct.jobcode);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public EmployeeThriftTupleScheme getScheme() {
      return new EmployeeThriftTupleScheme();
    }
  }

  private static class EmployeeThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<EmployeeThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployeeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.recid);
      oprot.writeDouble(struct.share);
      oprot.writeI32(struct.jobcode);
      oprot.writeString(struct.title);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployeeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.recid = iprot.readDouble();
      struct.setRecidIsSet(true);
      struct.share = iprot.readDouble();
      struct.setShareIsSet(true);
      struct.jobcode = iprot.readI32();
      struct.setJobcodeIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

