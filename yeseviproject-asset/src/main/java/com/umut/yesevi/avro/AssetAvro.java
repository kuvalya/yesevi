/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.umut.yesevi.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AssetAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3874109486493320655L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssetAvro\",\"namespace\":\"com.umut.yesevi.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"rationum\",\"type\":\"float\"},{\"name\":\"barcode\",\"type\":\"int\"},{\"name\":\"itemnum\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AssetAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AssetAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AssetAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AssetAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AssetAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AssetAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AssetAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AssetAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AssetAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private double id;
  private float rationum;
  private int barcode;
  private int itemnum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssetAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param rationum The new value for rationum
   * @param barcode The new value for barcode
   * @param itemnum The new value for itemnum
   */
  public AssetAvro(java.lang.Double id, java.lang.Float rationum, java.lang.Integer barcode, java.lang.Integer itemnum) {
    this.id = id;
    this.rationum = rationum;
    this.barcode = barcode;
    this.itemnum = itemnum;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return rationum;
    case 2: return barcode;
    case 3: return itemnum;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Double)value$; break;
    case 1: rationum = (java.lang.Float)value$; break;
    case 2: barcode = (java.lang.Integer)value$; break;
    case 3: itemnum = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public double getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(double value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'rationum' field.
   * @return The value of the 'rationum' field.
   */
  public float getRationum() {
    return rationum;
  }


  /**
   * Sets the value of the 'rationum' field.
   * @param value the value to set.
   */
  public void setRationum(float value) {
    this.rationum = value;
  }

  /**
   * Gets the value of the 'barcode' field.
   * @return The value of the 'barcode' field.
   */
  public int getBarcode() {
    return barcode;
  }


  /**
   * Sets the value of the 'barcode' field.
   * @param value the value to set.
   */
  public void setBarcode(int value) {
    this.barcode = value;
  }

  /**
   * Gets the value of the 'itemnum' field.
   * @return The value of the 'itemnum' field.
   */
  public int getItemnum() {
    return itemnum;
  }


  /**
   * Sets the value of the 'itemnum' field.
   * @param value the value to set.
   */
  public void setItemnum(int value) {
    this.itemnum = value;
  }

  /**
   * Creates a new AssetAvro RecordBuilder.
   * @return A new AssetAvro RecordBuilder
   */
  public static com.umut.yesevi.avro.AssetAvro.Builder newBuilder() {
    return new com.umut.yesevi.avro.AssetAvro.Builder();
  }

  /**
   * Creates a new AssetAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssetAvro RecordBuilder
   */
  public static com.umut.yesevi.avro.AssetAvro.Builder newBuilder(com.umut.yesevi.avro.AssetAvro.Builder other) {
    if (other == null) {
      return new com.umut.yesevi.avro.AssetAvro.Builder();
    } else {
      return new com.umut.yesevi.avro.AssetAvro.Builder(other);
    }
  }

  /**
   * Creates a new AssetAvro RecordBuilder by copying an existing AssetAvro instance.
   * @param other The existing instance to copy.
   * @return A new AssetAvro RecordBuilder
   */
  public static com.umut.yesevi.avro.AssetAvro.Builder newBuilder(com.umut.yesevi.avro.AssetAvro other) {
    if (other == null) {
      return new com.umut.yesevi.avro.AssetAvro.Builder();
    } else {
      return new com.umut.yesevi.avro.AssetAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for AssetAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssetAvro>
    implements org.apache.avro.data.RecordBuilder<AssetAvro> {

    private double id;
    private float rationum;
    private int barcode;
    private int itemnum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.umut.yesevi.avro.AssetAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.rationum)) {
        this.rationum = data().deepCopy(fields()[1].schema(), other.rationum);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.barcode)) {
        this.barcode = data().deepCopy(fields()[2].schema(), other.barcode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.itemnum)) {
        this.itemnum = data().deepCopy(fields()[3].schema(), other.itemnum);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AssetAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.umut.yesevi.avro.AssetAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rationum)) {
        this.rationum = data().deepCopy(fields()[1].schema(), other.rationum);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.barcode)) {
        this.barcode = data().deepCopy(fields()[2].schema(), other.barcode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemnum)) {
        this.itemnum = data().deepCopy(fields()[3].schema(), other.itemnum);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public double getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder setId(double value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rationum' field.
      * @return The value.
      */
    public float getRationum() {
      return rationum;
    }


    /**
      * Sets the value of the 'rationum' field.
      * @param value The value of 'rationum'.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder setRationum(float value) {
      validate(fields()[1], value);
      this.rationum = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rationum' field has been set.
      * @return True if the 'rationum' field has been set, false otherwise.
      */
    public boolean hasRationum() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rationum' field.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder clearRationum() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'barcode' field.
      * @return The value.
      */
    public int getBarcode() {
      return barcode;
    }


    /**
      * Sets the value of the 'barcode' field.
      * @param value The value of 'barcode'.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder setBarcode(int value) {
      validate(fields()[2], value);
      this.barcode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'barcode' field has been set.
      * @return True if the 'barcode' field has been set, false otherwise.
      */
    public boolean hasBarcode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'barcode' field.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder clearBarcode() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemnum' field.
      * @return The value.
      */
    public int getItemnum() {
      return itemnum;
    }


    /**
      * Sets the value of the 'itemnum' field.
      * @param value The value of 'itemnum'.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder setItemnum(int value) {
      validate(fields()[3], value);
      this.itemnum = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemnum' field has been set.
      * @return True if the 'itemnum' field has been set, false otherwise.
      */
    public boolean hasItemnum() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'itemnum' field.
      * @return This builder.
      */
    public com.umut.yesevi.avro.AssetAvro.Builder clearItemnum() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AssetAvro build() {
      try {
        AssetAvro record = new AssetAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Double) defaultValue(fields()[0]);
        record.rationum = fieldSetFlags()[1] ? this.rationum : (java.lang.Float) defaultValue(fields()[1]);
        record.barcode = fieldSetFlags()[2] ? this.barcode : (java.lang.Integer) defaultValue(fields()[2]);
        record.itemnum = fieldSetFlags()[3] ? this.itemnum : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AssetAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<AssetAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AssetAvro>
    READER$ = (org.apache.avro.io.DatumReader<AssetAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.id);

    out.writeFloat(this.rationum);

    out.writeInt(this.barcode);

    out.writeInt(this.itemnum);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readDouble();

      this.rationum = in.readFloat();

      this.barcode = in.readInt();

      this.itemnum = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readDouble();
          break;

        case 1:
          this.rationum = in.readFloat();
          break;

        case 2:
          this.barcode = in.readInt();
          break;

        case 3:
          this.itemnum = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










