/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.umut.yesevi.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-16")
public class AssetThrift implements org.apache.thrift.TBase<AssetThrift, AssetThrift._Fields>, java.io.Serializable, Cloneable, Comparable<AssetThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssetThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField RATIONUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rationum", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BARCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("barcode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEMNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("itemnum", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssetThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssetThriftTupleSchemeFactory();

  public double id; // required
  public double rationum; // required
  public int barcode; // required
  public int itemnum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    RATIONUM((short)2, "rationum"),
    BARCODE((short)3, "barcode"),
    ITEMNUM((short)4, "itemnum");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // RATIONUM
          return RATIONUM;
        case 3: // BARCODE
          return BARCODE;
        case 4: // ITEMNUM
          return ITEMNUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RATIONUM_ISSET_ID = 1;
  private static final int __BARCODE_ISSET_ID = 2;
  private static final int __ITEMNUM_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RATIONUM, new org.apache.thrift.meta_data.FieldMetaData("rationum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BARCODE, new org.apache.thrift.meta_data.FieldMetaData("barcode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEMNUM, new org.apache.thrift.meta_data.FieldMetaData("itemnum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssetThrift.class, metaDataMap);
  }

  public AssetThrift() {
  }

  public AssetThrift(
    double id,
    double rationum,
    int barcode,
    int itemnum)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.rationum = rationum;
    setRationumIsSet(true);
    this.barcode = barcode;
    setBarcodeIsSet(true);
    this.itemnum = itemnum;
    setItemnumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssetThrift(AssetThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.rationum = other.rationum;
    this.barcode = other.barcode;
    this.itemnum = other.itemnum;
  }

  @Override
  public AssetThrift deepCopy() {
    return new AssetThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0.0;
    setRationumIsSet(false);
    this.rationum = 0.0;
    setBarcodeIsSet(false);
    this.barcode = 0;
    setItemnumIsSet(false);
    this.itemnum = 0;
  }

  public double getId() {
    return this.id;
  }

  public AssetThrift setId(double id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getRationum() {
    return this.rationum;
  }

  public AssetThrift setRationum(double rationum) {
    this.rationum = rationum;
    setRationumIsSet(true);
    return this;
  }

  public void unsetRationum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATIONUM_ISSET_ID);
  }

  /** Returns true if field rationum is set (has been assigned a value) and false otherwise */
  public boolean isSetRationum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATIONUM_ISSET_ID);
  }

  public void setRationumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATIONUM_ISSET_ID, value);
  }

  public int getBarcode() {
    return this.barcode;
  }

  public AssetThrift setBarcode(int barcode) {
    this.barcode = barcode;
    setBarcodeIsSet(true);
    return this;
  }

  public void unsetBarcode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BARCODE_ISSET_ID);
  }

  /** Returns true if field barcode is set (has been assigned a value) and false otherwise */
  public boolean isSetBarcode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BARCODE_ISSET_ID);
  }

  public void setBarcodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BARCODE_ISSET_ID, value);
  }

  public int getItemnum() {
    return this.itemnum;
  }

  public AssetThrift setItemnum(int itemnum) {
    this.itemnum = itemnum;
    setItemnumIsSet(true);
    return this;
  }

  public void unsetItemnum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEMNUM_ISSET_ID);
  }

  /** Returns true if field itemnum is set (has been assigned a value) and false otherwise */
  public boolean isSetItemnum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEMNUM_ISSET_ID);
  }

  public void setItemnumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEMNUM_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Double)value);
      }
      break;

    case RATIONUM:
      if (value == null) {
        unsetRationum();
      } else {
        setRationum((java.lang.Double)value);
      }
      break;

    case BARCODE:
      if (value == null) {
        unsetBarcode();
      } else {
        setBarcode((java.lang.Integer)value);
      }
      break;

    case ITEMNUM:
      if (value == null) {
        unsetItemnum();
      } else {
        setItemnum((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case RATIONUM:
      return getRationum();

    case BARCODE:
      return getBarcode();

    case ITEMNUM:
      return getItemnum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case RATIONUM:
      return isSetRationum();
    case BARCODE:
      return isSetBarcode();
    case ITEMNUM:
      return isSetItemnum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AssetThrift)
      return this.equals((AssetThrift)that);
    return false;
  }

  public boolean equals(AssetThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_rationum = true;
    boolean that_present_rationum = true;
    if (this_present_rationum || that_present_rationum) {
      if (!(this_present_rationum && that_present_rationum))
        return false;
      if (this.rationum != that.rationum)
        return false;
    }

    boolean this_present_barcode = true;
    boolean that_present_barcode = true;
    if (this_present_barcode || that_present_barcode) {
      if (!(this_present_barcode && that_present_barcode))
        return false;
      if (this.barcode != that.barcode)
        return false;
    }

    boolean this_present_itemnum = true;
    boolean that_present_itemnum = true;
    if (this_present_itemnum || that_present_itemnum) {
      if (!(this_present_itemnum && that_present_itemnum))
        return false;
      if (this.itemnum != that.itemnum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rationum);

    hashCode = hashCode * 8191 + barcode;

    hashCode = hashCode * 8191 + itemnum;

    return hashCode;
  }

  @Override
  public int compareTo(AssetThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRationum(), other.isSetRationum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRationum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rationum, other.rationum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBarcode(), other.isSetBarcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBarcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.barcode, other.barcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetItemnum(), other.isSetItemnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemnum, other.itemnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AssetThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rationum:");
    sb.append(this.rationum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("barcode:");
    sb.append(this.barcode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemnum:");
    sb.append(this.itemnum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rationum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'barcode' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'itemnum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssetThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AssetThriftStandardScheme getScheme() {
      return new AssetThriftStandardScheme();
    }
  }

  private static class AssetThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssetThrift> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AssetThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.id = iprot.readDouble();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RATIONUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rationum = iprot.readDouble();
              struct.setRationumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BARCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.barcode = iprot.readI32();
              struct.setBarcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEMNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemnum = iprot.readI32();
              struct.setItemnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRationum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rationum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBarcode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'barcode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetItemnum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemnum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AssetThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeDouble(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATIONUM_FIELD_DESC);
      oprot.writeDouble(struct.rationum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BARCODE_FIELD_DESC);
      oprot.writeI32(struct.barcode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEMNUM_FIELD_DESC);
      oprot.writeI32(struct.itemnum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssetThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AssetThriftTupleScheme getScheme() {
      return new AssetThriftTupleScheme();
    }
  }

  private static class AssetThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssetThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssetThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.id);
      oprot.writeDouble(struct.rationum);
      oprot.writeI32(struct.barcode);
      oprot.writeI32(struct.itemnum);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssetThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readDouble();
      struct.setIdIsSet(true);
      struct.rationum = iprot.readDouble();
      struct.setRationumIsSet(true);
      struct.barcode = iprot.readI32();
      struct.setBarcodeIsSet(true);
      struct.itemnum = iprot.readI32();
      struct.setItemnumIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

